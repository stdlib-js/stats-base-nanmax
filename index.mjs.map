{"version":3,"file":"index.mjs","sources":["../lib/nanmax.js","../lib/ndarray.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} maximum value\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = nanmax( N, x, 1 );\n* // returns 2.0\n*/\nfunction nanmax( N, x, stride ) {\n\tvar max;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmax = v;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} maximum value\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmax( N, x, 2, 1 );\n* // returns 4.0\n*/\nfunction nanmax( N, x, stride, offset ) {\n\tvar max;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmax = v;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar nanmax = require( './nanmax.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( nanmax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = nanmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the maximum value of a strided array, ignoring `NaN` values.\n*\n* @module @stdlib/stats-base-nanmax\n*\n* @example\n* var nanmax = require( '@stdlib/stats-base-nanmax' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var N = x.length;\n*\n* var v = nanmax( N, x, 1 );\n* // returns 2.0\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var nanmax = require( '@stdlib/stats-base-nanmax' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var N = floor( x.length / 2 );\n*\n* var v = nanmax.ndarray( N, x, 2, 1 );\n* // returns 4.0\n*/\n\n// MODULES //\n\nvar nanmax = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = nanmax;\n"],"names":["isnan","require$$0","isPositiveZero","require$$1","nanmax","N","x","stride","max","ix","v","i","NaN","offset","lib"],"mappings":";;iTAsBA,IAAIA,EAAQC,EACRC,EAAiBC,EAiErB,IClEIH,EAAQC,EACRC,EAAiBC,EAgErB,IChEAC,EFoBA,SAAiBC,EAAGC,EAAGC,GACtB,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKN,GAAK,EACT,OAAOO,IAER,GAAW,IAANP,GAAsB,IAAXE,EACf,OAAOD,EAAG,GAOX,IAJCG,EADIF,EAAS,GACP,EAAEF,GAAKE,EAER,EAEAI,EAAI,EAAGA,EAAIN,IAChBK,EAAIJ,EAAGG,KACIC,EAFQC,IAKnBF,GAAMF,EAEP,GAAKI,IAAMN,EACV,OAAOO,IAIR,IAFAJ,EAAME,EACNC,GAAK,EACIA,EAAIN,EAAGM,IAEfD,EAAIJ,EADJG,GAAMF,GAEDP,EAAOU,KAGPA,EAAIF,GAASE,IAAMF,GAAON,EAAgBQ,MAC9CF,EAAME,GAGR,OAAOF,GE5DRP,EAOAG,EAAA,WDiBA,SAAiBC,EAAGC,EAAGC,EAAQM,GAC9B,IAAIL,EACAC,EACAC,EACAC,EAEJ,GAAKN,GAAK,EACT,OAAOO,IAER,GAAW,IAANP,GAAsB,IAAXE,EACf,OAAOD,EAAGO,GAGX,IADAJ,EAAKI,EACCF,EAAI,EAAGA,EAAIN,IAChBK,EAAIJ,EAAGG,KACIC,EAFQC,IAKnBF,GAAMF,EAEP,GAAKI,IAAMN,EACV,OAAOO,IAIR,IAFAJ,EAAME,EACNC,GAAK,EACIA,EAAIN,EAAGM,IAEfD,EAAIJ,EADJG,GAAMF,GAEDP,EAAOU,KAGPA,EAAIF,GAASE,IAAMF,GAAON,EAAgBQ,MAC9CF,EAAME,GAGR,OAAOF,KC/CR,ICkBAM,EDlBAV"}